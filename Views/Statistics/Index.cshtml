@{
    ViewData["Title"] = "Index";
    Layout = "~/Views/BarberLayout/Index.cshtml";
}

<style>
    .stats-container {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        padding: 0;
        margin: -20px -20px 30px -20px;
        color: white;
        position: relative;
        overflow: hidden;
    }

        .stats-container::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><defs><pattern id="grain" width="100" height="100" patternUnits="userSpaceOnUse"><circle cx="25" cy="25" r="1" fill="white" opacity="0.05"/><circle cx="75" cy="75" r="1" fill="white" opacity="0.05"/><circle cx="50" cy="10" r="0.5" fill="white" opacity="0.03"/></pattern></defs><rect width="100" height="100" fill="url(%23grain)"/></svg>');
            opacity: 0.3;
        }

    .welcome-panel {
        background: rgba(255, 255, 255, 0.1);
        backdrop-filter: blur(10px);
        border-radius: 20px;
        padding: 30px;
        margin: 20px;
        border: 1px solid rgba(255, 255, 255, 0.2);
        position: relative;
        z-index: 1;
    }

    .welcome-title {
        font-size: 2.5rem;
        font-weight: 300;
        margin-bottom: 10px;
        color: #fff;
        text-shadow: 0 1px 3px rgba(0, 0, 0, 0.3);
    }

    .welcome-date {
        font-size: 1.1rem;
        opacity: 0.9;
        font-weight: 300;
    }

    .kpi-card {
        background: #fff;
        border-radius: 15px;
        padding: 25px;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
        transition: all 0.3s ease;
        border-left: 4px solid;
        margin-bottom: 20px;
        position: relative;
        overflow: hidden;
    }

        .kpi-card::before {
            content: '';
            position: absolute;
            top: -50%;
            left: -50%;
            width: 200%;
            height: 200%;
            background: linear-gradient(45deg, transparent, rgba(255, 255, 255, 0.1), transparent);
            transform: translateX(-100%) translateY(-100%) rotate(45deg);
            transition: transform 0.6s;
        }

        .kpi-card:hover::before {
            transform: translateX(100%) translateY(100%) rotate(45deg);
        }

        .kpi-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 15px 40px rgba(0, 0, 0, 0.15);
        }

        .kpi-card.primary {
            border-left-color: #667eea;
        }

        .kpi-card.success {
            border-left-color: #28a745;
        }

        .kpi-card.warning {
            border-left-color: #ffc107;
        }

        .kpi-card.info {
            border-left-color: #17a2b8;
        }

    .kpi-number {
        font-size: 2.5rem;
        font-weight: 700;
        margin-bottom: 5px;
        color: #2c3e50;
        position: relative;
        z-index: 1;
    }

    .kpi-label {
        font-size: 0.9rem;
        color: #6c757d;
        text-transform: uppercase;
        letter-spacing: 1px;
        font-weight: 600;
        position: relative;
        z-index: 1;
    }

    .kpi-icon {
        font-size: 2.5rem;
        opacity: 0.7;
        float: right;
        margin-top: -10px;
        position: relative;
        z-index: 1;
        transition: all 0.3s ease;
    }

    .kpi-card:hover .kpi-icon {
        opacity: 1;
        transform: scale(1.1);
    }

    .chart-card {
        background: #fff;
        border-radius: 15px;
        padding: 25px;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
        margin-bottom: 30px;
        transition: all 0.3s ease;
        border-top: 3px solid transparent;
        background-image: linear-gradient(white, white), linear-gradient(135deg, #667eea, #764ba2);
        background-origin: border-box;
        background-clip: padding-box, border-box;
    }

        .chart-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 15px 40px rgba(0, 0, 0, 0.15);
        }

    .chart-title {
        font-size: 1.3rem;
        font-weight: 600;
        color: #2c3e50;
        margin-bottom: 20px;
        padding-bottom: 10px;
        border-bottom: 2px solid #f8f9fa;
        position: relative;
    }

        .chart-title::after {
            content: '';
            position: absolute;
            bottom: -2px;
            left: 0;
            width: 50px;
            height: 2px;
            background: linear-gradient(135deg, #667eea, #764ba2);
        }

    .progress-bar-custom {
        height: 10px;
        border-radius: 10px;
        background: linear-gradient(90deg, #667eea, #764ba2);
        position: relative;
        overflow: hidden;
    }

        .progress-bar-custom::after {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.4), transparent);
            animation: shimmer 2s infinite;
        }

    @@keyframes shimmer {
        0%

    {
        left: -100%;
    }

    100% {
        left: 100%;
    }

    }

    .table-modern {
        border-radius: 10px;
        overflow: hidden;
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.08);
    }

        .table-modern thead {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
        }

            .table-modern thead th {
                border: none;
                font-weight: 600;
                text-transform: uppercase;
                font-size: 0.85rem;
                letter-spacing: 0.5px;
            }

        .table-modern tbody tr {
            transition: all 0.3s ease;
        }

            .table-modern tbody tr:hover {
                background-color: #f8f9fa;
                transform: scale(1.02);
            }

        .table-modern tbody td {
            border-color: #e9ecef;
            vertical-align: middle;
        }

    .stats-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        gap: 20px;
        margin-bottom: 30px;
    }

    .chart-grid {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 30px;
        margin-bottom: 30px;
    }

    .badge {
        font-size: 0.8rem;
        padding: 0.5rem 1rem;
        border-radius: 20px;
    }

    .progress {
        border-radius: 10px;
        overflow: hidden;
    }

    .alert {
        border-radius: 15px;
        border: none;
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
    }

    .alert-danger {
        background: linear-gradient(135deg, #ff6b6b, #ff5252);
        color: white;
    }

    .alert-info {
        background: linear-gradient(135deg, #4fc3f7, #29b6f6);
        color: white;
    }

    .loading-spinner {
        display: none;
        text-align: center;
        padding: 20px;
    }

    .spinner-border {
        width: 3rem;
        height: 3rem;
        border-width: 0.3em;
        border-color: #667eea;
        border-right-color: transparent;
        animation: spin 1s linear infinite;
    }

    @@keyframes spin {
        0%

    {
        transform: rotate(0deg);
    }

    100% {
        transform: rotate(360deg);
    }

    }

    /* Responsive Design */
    @@media (max-width: 768px) {
        .chart-grid

    {
        grid-template-columns: 1fr;
    }

    .welcome-title {
        font-size: 2rem;
    }

    .kpi-number {
        font-size: 2rem;
    }

    .kpi-icon {
        font-size: 2rem;
    }

    .stats-grid {
        grid-template-columns: 1fr;
    }

    .welcome-panel {
        margin: 10px;
        padding: 20px;
    }

    .chart-card {
        padding: 15px;
    }

    }

    @@media (max-width: 576px) {
        .stats-container

    {
        margin: -15px -15px 20px -15px;
    }

    .kpi-card {
        padding: 20px;
    }

    .table-responsive {
        font-size: 0.9rem;
    }

    }

    /* Animasyonlar */
    .fade-in {
        animation: fadeIn 0.6s ease-in;
    }

    @@keyframes fadeIn {
        from

    {
        opacity: 0;
        transform: translateY(20px);
    }

    to {
        opacity: 1;
        transform: translateY(0);
    }

    }

    .slide-up {
        animation: slideUp 0.6s ease-out;
    }

    @@keyframes slideUp {
        from

    {
        opacity: 0;
        transform: translateY(30px);
    }

    to {
        opacity: 1;
        transform: translateY(0);
    }

    }
</style>

<!-- Karşılama Paneli -->
<div class="stats-container">
    <div class="welcome-panel fade-in">
        <h1 class="welcome-title">
            <i class="fas fa-chart-line me-3"></i>
            Merhaba, @ViewBag.BarberName
        </h1>
        <p class="welcome-date">
            <i class="fas fa-calendar-alt me-2"></i>
            Bugün @DateTime.Now.ToString("dd MMMM yyyy, dddd", new System.Globalization.CultureInfo("tr-TR"))
        </p>
    </div>
</div>

<!-- Loading Spinner -->
<div id="loadingSpinner" class="loading-spinner">
    <div class="spinner-border" role="status">
        <span class="visually-hidden">Yükleniyor...</span>
    </div>
    <p class="mt-2">Veriler yükleniyor...</p>
</div>

<!-- KPI Kartları -->
<div class="stats-grid slide-up">
    <div class="kpi-card primary">
        <div class="kpi-icon text-primary">
            <i class="fas fa-calendar-check"></i>
        </div>
        <div class="kpi-number" data-target="@ViewBag.TotalReservations">0</div>
        <div class="kpi-label">Toplam Randevu</div>
    </div>

    <div class="kpi-card success">
        <div class="kpi-icon text-success">
            <i class="fas fa-calendar-week"></i>
        </div>
        <div class="kpi-number" data-target="@ViewBag.TotalThisMonth">0</div>
        <div class="kpi-label">Bu Ay</div>
    </div>

    <div class="kpi-card warning">
        <div class="kpi-icon text-warning">
            <i class="fas fa-calendar-day"></i>
        </div>
        <div class="kpi-number" data-target="@ViewBag.TotalThisWeek">0</div>
        <div class="kpi-label">Bu Hafta</div>
    </div>

    <div class="kpi-card info">
        <div class="kpi-icon text-info">
            <i class="fas fa-clock"></i>
        </div>
        <div class="kpi-number" data-target="@ViewBag.TotalToday">0</div>
        <div class="kpi-label">Bugün</div>
    </div>
</div>

<!-- Doluluk Oranı -->
<div class="chart-card slide-up">
    <h3 class="chart-title">
        <i class="fas fa-percentage me-2"></i>
        Günlük Doluluk Oranı
    </h3>
    <div class="row align-items-center">
        <div class="col-md-8">
            <div class="progress" style="height: 20px;">
                <div class="progress-bar progress-bar-custom"
                     id="occupancyProgressBar"
                     style="width: 0%"
                     data-target="@ViewBag.DailyOccupancyRate">
                </div>
            </div>
        </div>
        <div class="col-md-4 text-end">
            <span class="h4 text-primary" id="occupancyPercentage">0%</span>
        </div>
    </div>
</div>

<!-- Grafikler -->
<div class="chart-grid slide-up">
    <div class="chart-card">
        <h3 class="chart-title">
            <i class="fas fa-chart-bar me-2"></i>
            En Yoğun Saatler (Son 30 Gün)
        </h3>
        <canvas id="busiestHoursChart" height="300"></canvas>
    </div>

    <div class="chart-card">
        <h3 class="chart-title">
            <i class="fas fa-chart-line me-2"></i>
            Bugün Saatlik Yoğunluk
        </h3>
        <canvas id="hourlyIntensityChart" height="300"></canvas>
    </div>
</div>

<!-- En Yoğun Günler Tablosu -->
<div class="chart-card slide-up">
    <h3 class="chart-title">
        <i class="fas fa-trophy me-2"></i>
        En Yoğun Günler (Son 30 Gün)
    </h3>
    <div class="table-responsive">
        <table class="table table-modern table-hover">
            <thead>
                <tr>
                    <th><i class="fas fa-medal me-2"></i>Sıra</th>
                    <th><i class="fas fa-calendar me-2"></i>Tarih</th>
                    <th><i class="fas fa-users me-2"></i>Randevu Sayısı</th>
                    <th><i class="fas fa-chart-bar me-2"></i>Yoğunluk</th>
                </tr>
            </thead>
            <tbody>
                @if (ViewBag.BusiestDays != null)
                {
                    int rank = 1;
                    var busiestDaysList = (IEnumerable<dynamic>)ViewBag.BusiestDays;
                    int maxCount = 1;

                    // Max count'u hesapla
                    foreach (var item in busiestDaysList)
                    {
                        if (item.Count > maxCount)
                            maxCount = item.Count;
                    }

                    foreach (var day in busiestDaysList)
                    {
                        string badgeClass = rank == 1 ? "bg-warning" : rank == 2 ? "bg-secondary" : rank == 3 ? "bg-info" : "bg-primary";
                        string rankIcon = rank == 1 ? "fas fa-crown" : rank == 2 ? "fas fa-medal" : rank == 3 ? "fas fa-award" : "fas fa-hashtag";

                        <tr>
                            <td>
                                <span class="badge @badgeClass">
                                    <i class="@rankIcon me-1"></i>@rank
                                </span>
                            </td>
                            <td>
                                <strong>@day.Date.ToString("dd MMMM yyyy", new System.Globalization.CultureInfo("tr-TR"))</strong>
                                <br>
                                <small class="text-muted">@day.Date.ToString("dddd", new System.Globalization.CultureInfo("tr-TR"))</small>
                            </td>
                            <td>
                                <span class="badge bg-success">@day.Count</span> randevu
                            </td>
                            <td>
                                <div class="progress" style="height: 12px;">
                                    <div class="progress-bar bg-gradient"
                                         style="width: @((day.Count * 100.0 / maxCount))%; background: linear-gradient(90deg, #28a745, #20c997);">
                                    </div>
                                </div>
                                <small class="text-muted">@((day.Count * 100.0 / maxCount).ToString("F1"))%</small>
                            </td>
                        </tr>
                        rank++;
                    }
                }
                else
                {
                    <tr>
                        <td colspan="4" class="text-center text-muted py-4">
                            <i class="fas fa-info-circle me-2"></i>
                            Henüz veri bulunmuyor
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

<!-- Debug Bilgileri -->
@if (!string.IsNullOrEmpty(ViewBag.ErrorMessage?.ToString()))
{
    <div class="alert alert-danger slide-up">
        <h4><i class="fas fa-exclamation-triangle me-2"></i>Hata Oluştu</h4>
        <p><strong>Mesaj:</strong> @ViewBag.ErrorMessage</p>
        @if (!string.IsNullOrEmpty(ViewBag.ErrorDetails?.ToString()))
        {
            <p><strong>Detay:</strong> @ViewBag.ErrorDetails</p>
        }
    </div>
}

@if (!string.IsNullOrEmpty(ViewBag.DebugInfo?.ToString()))
{
    <div class="alert alert-info slide-up">
        <h4><i class="fas fa-bug me-2"></i>Debug Bilgileri</h4>
        <div class="row">
            <div class="col-md-6">
                <p><strong>Debug Info:</strong> @ViewBag.DebugInfo</p>
                <p><strong>Claims:</strong> @ViewBag.DebugClaims</p>
                <p><strong>Simple Count:</strong> @ViewBag.DebugSimpleCount</p>
                <p><strong>Join Count:</strong> @ViewBag.DebugJoinCount</p>
            </div>
            <div class="col-md-6">
                <p><strong>Join Null Count:</strong> @ViewBag.DebugJoinNullCount</p>
                <p><strong>Reservation Hour IDs:</strong> @ViewBag.DebugReservationHourIds</p>
                <p><strong>Barber Reservations Count:</strong> @ViewBag.DebugBarberReservationsCount</p>
                <p><strong>Available Hours Today:</strong> @ViewBag.DebugAvailableHoursToday</p>
                <p><strong>Reserved Hours Today:</strong> @ViewBag.DebugReservedHoursToday</p>
            </div>
        </div>
        @if (!string.IsNullOrEmpty(ViewBag.StackTrace?.ToString()))
        {
            <details class="mt-3">
                <summary class="btn btn-outline-light btn-sm">
                    <i class="fas fa-code me-2"></i>Stack Trace'i Göster
                </summary>
                <pre class="mt-2 p-3 bg-dark text-light rounded">@ViewBag.StackTrace</pre>
            </details>
        }
    </div>
}

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Loading spinner'ı gizle
        setTimeout(() => {
            document.getElementById('loadingSpinner').style.display = 'none';
        }, 500);

        // Sayı animasyonu fonksiyonu
        function animateNumber(element, target, duration = 1000) {
            const start = 0;
            const increment = target / (duration / 16);
            let current = start;

            const timer = setInterval(() => {
                current += increment;
                if (current >= target) {
                    current = target;
                    clearInterval(timer);
                }
                element.textContent = Math.floor(current);
            }, 16);
        }

        // KPI kartlarını animasyonlu olarak güncelle
        document.querySelectorAll('.kpi-number').forEach(element => {
            const target = parseInt(element.getAttribute('data-target')) || 0;
            animateNumber(element, target);
        });

        // Doluluk oranını animasyonlu olarak güncelle
        const occupancyBar = document.getElementById('occupancyProgressBar');
        const occupancyText = document.getElementById('occupancyPercentage');
        const occupancyTarget = parseInt(occupancyBar.getAttribute('data-target')) || 0;

        setTimeout(() => {
            occupancyBar.style.width = occupancyTarget + '%';
            animateNumber(occupancyText, occupancyTarget);
        }, 500);

        // Chart.js konfigürasyonu
        const chartOptions = {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
                legend: {
                    display: false
                },
                tooltip: {
                    backgroundColor: 'rgba(0, 0, 0, 0.8)',
                    titleColor: '#fff',
                    bodyColor: '#fff',
                    borderColor: '#667eea',
                    borderWidth: 1,
                    cornerRadius: 8,
                    displayColors: false
                }
            },
            scales: {
                y: {
                    beginAtZero: true,
                    grid: {
                        color: 'rgba(0, 0, 0, 0.1)',
                        drawBorder: false
                    },
                    ticks: {
                        color: '#6c757d',
                        font: {
                            size: 12
                        }
                    }
                },
                x: {
                    grid: {
                        display: false
                    },
                    ticks: {
                        color: '#6c757d',
                        font: {
                            size: 12
                        }
                    }
                }
            },
            animation: {
                duration: 1500,
                easing: 'easeInOutQuart'
            }
        };

        // En Yoğun Saatler Grafiği
        const busiestHoursCtx = document.getElementById('busiestHoursChart').getContext('2d');
        const busiestHoursData = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(ViewBag.BusiestHours ?? new object[0]));

        new Chart(busiestHoursCtx, {
            type: 'bar',
            data: {
                labels: busiestHoursData.map(item => item.Hour + ':00'),
                datasets: [{
                    label: 'Randevu Sayısı',
                    data: busiestHoursData.map(item => item.Count),
                    backgroundColor: 'rgba(102, 126, 234, 0.8)',
                    borderColor: 'rgba(102, 126, 234, 1)',
                    borderWidth: 2,
                    borderRadius: 8,
                    borderSkipped: false,
                    hoverBackgroundColor: 'rgba(102, 126, 234, 0.9)',
                    hoverBorderColor: 'rgba(102, 126, 234, 1)',
                    hoverBorderWidth: 3
                }]
            },
            options: {
                ...chartOptions,
                plugins: {
                    ...chartOptions.plugins,
                    tooltip: {
                        ...chartOptions.plugins.tooltip,
                        callbacks: {
                            title: function(context) {
                                return 'Saat: ' + context[0].label;
                            },
                            label: function(context) {
                                return context.parsed.y + ' randevu';
                            }
                        }
                    }
                }
            }
        });

        // Bugün Saatlik Yoğunluk Grafiği
        const hourlyIntensityCtx = document.getElementById('hourlyIntensityChart').getContext('2d');
        const hourlyIntensityData = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(ViewBag.HourlyIntensity ?? new object[0]));

        new Chart(hourlyIntensityCtx, {
            type: 'line',
            data: {
                labels: hourlyIntensityData.map(item => item.Hour + ':00'),
                datasets: [{
                    label: 'Bugün Randevu Sayısı',
                    data: hourlyIntensityData.map(item => item.Count),
                    borderColor: 'rgba(118, 75, 162, 1)',
                    backgroundColor: 'rgba(118, 75, 162, 0.1)',
                    borderWidth: 3,
                    fill: true,
                    tension: 0.4,
                    pointBackgroundColor: 'rgba(118, 75, 162, 1)',
                    pointBorderColor: '#fff',
                    pointBorderWidth: 2,
                    pointRadius: 6,
                    pointHoverRadius: 8,
                    pointHoverBackgroundColor: 'rgba(118, 75, 162, 1)',
                    pointHoverBorderColor: '#fff',
                    pointHoverBorderWidth: 3
                }]
            },
            options: {
                ...chartOptions,
                plugins: {
                    ...chartOptions.plugins,
                    tooltip: {
                        ...chartOptions.plugins.tooltip,
                        callbacks: {
                            title: function(context) {
                                return 'Saat: ' + context[0].label;
                            },
                            label: function(context) {
                                return 'Bugün: ' + context.parsed.y + ' randevu';
                            }
                        }
                    }
                }
            }
        });

        // Tablo satırlarına tıklama efekti
        document.querySelectorAll('.table-modern tbody tr').forEach(row => {
            row.addEventListener('click', function() {
                this.style.backgroundColor = '#e3f2fd';
                setTimeout(() => {
                    this.style.backgroundColor = '';
                }, 300);
            });
        });

        // Sayfa yenileme butonu (isteğe bağlı)
        function refreshData() {
            document.getElementById('loadingSpinner').style.display = 'block';
            setTimeout(() => {
                window.location.reload();
            }, 1000);
        }

        // Otomatik yenileme (5 dakikada bir)
        setInterval(refreshData, 300000);
    });
</script>